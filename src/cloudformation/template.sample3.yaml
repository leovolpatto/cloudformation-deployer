---
AWSTemplateFormatVersion: '2010-09-09'
Description: Tks graphql test

Parameters:
  Sample:
    Type: String
    Description: etc123

  ProductSourcePackage:
    Type: String
    Description: path to lambda fcn
  SchemaS3Path:
    Type: String
    Description: path to schema

  Env:
    Type: String
    Description: Either Prod or Homol
  EnvLowerCase:
    Type: String
    Description: Either prod or homol
  DeployBucket:
    Type: String
    Description: The bucket where the lambda zip packages are stored

Resources:
  ProductDataSource:
    Type: AWS::AppSync::DataSource
    Properties:
      ApiId: !Sub ${CatalogApi.ApiId}
      Description: testerson
      LambdaConfig:
        LambdaFunctionArn: !Sub ${ProductSource.Arn}
      Name: productsource
      ServiceRoleArn: !Sub ${AppsyncIAMRole.Arn}
      Type: AWS_LAMBDA
  ProductResolver:
    Type: AWS::AppSync::Resolver
    Properties:
      ApiId: !Sub ${CatalogApi.ApiId}
      DataSourceName: !Sub ${ProductDataSource.Name}
      FieldName: getProduct
      Kind: UNIT
      TypeName: Query
      RequestMappingTemplate: '{ "version" : "2017-02-28", "operation": "Invoke", "payload": $util.toJson($context.arguments) }'
      ResponseMappingTemplate: $utils.toJson($context.result)
    DependsOn: GqlSchema

  CatalogApi:
    Type: AWS::AppSync::GraphQLApi
    Properties:
      AuthenticationType: API_KEY
      Name: tks-gql-test-catalo-api

  GqlSchema:
    Type: AWS::AppSync::GraphQLSchema
    Properties:
      ApiId: !Sub ${CatalogApi.ApiId}
      DefinitionS3Location: !Ref SchemaS3Path

  # ProductDataSource:
  #   Type: AWS::AppSync::DataSource
  #   Properties:
  #     ApiId: !Sub ${CatalogApi.ApiId}
  #     Description: testerson
  #     LambdaConfig:
  #       LambdaFunctionArn: !Sub ${ProductSource.Arn}
  #     Name: productsource
  #     ServiceRoleArn: !Sub ${AppsyncIAMRole.Arn}
  #     Type: AWS_LAMBDA

  # ProductResolver:
  #   Type: AWS::AppSync::Resolver
  #   Properties:
  #     ApiId: !Sub ${CatalogApi.ApiId}
  #     DataSourceName: product-ds
  #     FieldName: getProduct
  #     Kind: UNIT
  #     TypeName: Query
  #     RequestMappingTemplate: '{ "version" : "2017-02-28", "operation": "Invoke", "payload": $util.toJson($context.arguments) }'
  #     ResponseMappingTemplate: $utils.toJson($context.result)

  AppsyncIAMRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: appsync.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: !Sub allow-access-to-lambda-from-appsync-${EnvLowerCase}
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource:
                  - !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${ProductSource}

  ProductSource:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Ref DeployBucket
        S3Key: !Ref ProductSourcePackage
      Description: Product Source For GraphQl
      FunctionName: !Sub tks-gql-test-product-source-${EnvLowerCase}
      Handler: app.handler
      MemorySize: 128
      Role: !GetAtt LambdaIAMRole.Arn
      Runtime: nodejs10.x
      Timeout: 10

  LambdaIAMRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: !Sub crc-ra-integration-lambda-${EnvLowerCase}
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - cloudwatch:*
                  - logs:*
                Resource: "*"