AWSTemplateFormatVersion: 2010-09-09
Resources:
  ProductSource:
    Type: 'AWS::Lambda::Function'
    Properties:
      Code:
        S3Bucket: tok-sam-tmp-deploy
        S3Key: tks-graphql-test/218a774dcbb1e6be5a24e594f1bdffee
      Description: Product Source For GraphQl
      Tags:
        - Value: SAM
          Key: 'lambda:createdBy'
      MemorySize: 128
      Handler: build/lambda/ProductSource/app.handler
      Role: !GetAtt 
        - LambdaIAMRole
        - Arn
      Timeout: 10
      Runtime: nodejs12.x
  LambdaIAMRole:
    Type: 'AWS::IAM::Role'
    Properties:
      Policies:
        - PolicyName: !Sub 'crc-ra-integration-lambda-${EnvLowerCase}'
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Action:
                  - 'cloudwatch:*'
                  - 'logs:*'
                Resource: '*'
                Effect: Allow
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
    Metadata:
      'AWS::CloudFormation::Designer':
        id: c46cf75f-2b49-495e-b13c-76645fa4b084
  ProductDataSource:
    Type: 'AWS::AppSync::DataSource'
    Properties:
      ServiceRoleArn: !Sub '${AppsyncIAMRole.Arn}'
      Description: tradutor do data source para o schema
      ApiId: !Sub '${CatalogApi.ApiId}'
      LambdaConfig:
        LambdaFunctionArn: !Sub '${ProductSource.Arn}'
      Type: AWS_LAMBDA
      Name: productsource
    Metadata:
      'AWS::CloudFormation::Designer':
        id: f704c555-fe8a-4861-9937-b5faecc0c152
  ServerlessRestApiProdStage:
    Type: 'AWS::ApiGateway::Stage'
    Properties:
      DeploymentId: !Ref ServerlessRestApiDeploymentee82e8c09c
      RestApiId: !Ref ServerlessRestApi
      StageName: Prod
  AppsyncIAMRole:
    Type: 'AWS::IAM::Role'
    Properties:
      Policies:
        - PolicyName: !Sub 'allow-access-to-lambda-from-appsync-${EnvLowerCase}'
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Action:
                  - 'lambda:InvokeFunction'
                Resource:
                  - !Sub >-
                    arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${ProductSource}
                Effect: Allow
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service: appsync.amazonaws.com
    Metadata:
      'AWS::CloudFormation::Designer':
        id: b42def1f-04f4-48c9-a088-34ce70c62853
  ServerlessRestApiDeploymentee82e8c09c:
    Type: 'AWS::ApiGateway::Deployment'
    Properties:
      RestApiId: !Ref ServerlessRestApi
      Description: 'RestApi deployment id: ee82e8c09c00ad25075b28b4022c5db6a60df01f'
      StageName: Stage
  CatalogApi:
    Type: 'AWS::AppSync::GraphQLApi'
    Properties:
      Name: tks-gql-test-catalog-api
      AuthenticationType: API_KEY
    Metadata:
      'AWS::CloudFormation::Designer':
        id: c48e166e-45ec-4e40-91cc-ed6867746456
  GqlSchema:
    DependsOn:
      - ProductSource
    Type: 'AWS::AppSync::GraphQLSchema'
    Properties:
      Definition: |
        schema {
          query: Query
        }

        type Categoria {
          Categoria: String
          Departamento: String!
          Subcategoria: String
        }

        type Especificacao {
          Observacao: String
          Resumo: String
        }

        type Product {
          Categoria: [Categoria]
          Descricao: String
          Id: Int!
          Marca: String
          Nome: String
          Skus: [Sku]
          Visivel: Boolean!
        }

        type Query {
          getProduct(Id: Int!): Product
        }

        type Sku {
          Especificacoes: Especificacao
          Id: Int!
          Nome: String
        }
      ApiId: !Sub '${CatalogApi.ApiId}'
    Metadata:
      'AWS::CloudFormation::Designer':
        id: 92aea938-b085-4a42-80dd-4557ff9dedbb
  QueryGetProductResolver:
    Type: 'AWS::AppSync::Resolver'
    Properties:
      Kind: UNIT
      DataSourceName: !Sub '${ProductDataSource.Name}'
      ApiId: !Sub '${CatalogApi.ApiId}'
      RequestMappingTemplate: |
        {
            "version" : "2017-02-28",
            "operation": "Invoke",
            "payload" : "{\"Id\": $ctx.args.Id}"
        }
      TypeName: Query
      FieldName: getProduct
      ResponseMappingTemplate: $utils.toJson($context.result)
    DependsOn: GqlSchema
  ServerlessRestApi:
    Type: 'AWS::ApiGateway::RestApi'
    Properties:
      Body:
        info:
          version: '1.0'
          title: !Ref 'AWS::StackName'
        paths:
          /product:
            get:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub >-
                  arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ProductSource.Arn}/invocations
              responses: {}
        swagger: '2.0'
  ProductSourceProductSourcePermissionProd:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      Principal: apigateway.amazonaws.com
      FunctionName: !Ref ProductSource
      SourceArn: !Sub 
        - >-
          arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${__ApiId__}/${__Stage__}/GET/product
        - __Stage__: '*'
          __ApiId__: !Ref ServerlessRestApi
Description: Tks graphql test
Parameters:
  ProductSourcePackage:
    Type: String
    Description: path to lambda fcn
  EnvLowerCase:
    Type: String
    Description: Either prod or homol
  Env:
    Type: String
    Description: Either Prod or Homol
  DeployBucket:
    Type: String
    Description: The bucket where the lambda zip packages are stored
